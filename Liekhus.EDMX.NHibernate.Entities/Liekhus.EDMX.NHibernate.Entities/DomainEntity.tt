<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ assembly name="$(ProjectDir)TiraggoEdmx\TiraggoEdmx.EF.dll" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="TiraggoEdmx_v3" #>
<#
    string path = System.IO.Path.GetDirectoryName(Host.TemplateFile);

	// ******************************************
	// *** CHANGE THIS TO YOUR EDMX FILE NAME ***
	// ******************************************
	string edxmFileName = @"DomainModel.edmx";

    string inputFile = edxmFileName;
    string inputPath = path + "\\" + edxmFileName;

    Edmx edmx = null;

    try
    {
        edmx = Edmx.Load(inputPath);
    }
    catch(Exception ex)
    {
		return "// Either the " + edxmFileName + " [" + inputPath + "] was not found or it's not a V3 EDMX File. You must change this in the T4 Template file.  " + ex.Message;
    }

    MetadataLoader loader = new MetadataLoader(this);
    var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
    var code = new CodeGenerationTools(this);
    EdmItemCollection itemCollection = loader.CreateEdmItemCollection(inputFile);

    // for each entity
    foreach (EntityType entity in itemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
    {
        // Everything you need including your low level SQL metadata types
        TiraggoEntityInfo info = new TiraggoEntityInfo(edmx, entity.FullName);

        fileManager.StartNewFile(entity.Name + ".Generated.cs");
#>
//**********************************************************************************
// This file is generated by a T4 template.  Any modifications to this file will
// be overridden the next time this file is generated.  DO NOT MODIFY THIS FILE!!!
//**********************************************************************************
using System;

<#
        ClearIndent();
        BeginNamespace(code);

#>
    <#="public partial class " + info.ConceptualModel.Name#>
    <#="{"#>
<#
        foreach (tgProperty prop in info.ConceptualModel.Properties)
        {#>
		<#="public virtual " + prop.Type + " " + prop.Name + " { get; protected set; }"#>
<#      }

        PopIndent();

		if(info.ConceptualModel.Key.Count() > 1)
		{#>

		<#="public override bool Equals(object obj)"#>
		<#="{"#>
			<#=info.ConceptualModel.Name + " other = obj as " + info.ConceptualModel.Name + ";"#>

			<#="if (ReferenceEquals(null, other)) return false;"#>
			<#="if (ReferenceEquals(this, other)) return true;"#>

			<#="return true"#>
<#
			foreach (tgPropertyRef key in info.ConceptualModel.Key)
			{
#>
			<#=" && this." + key.Name + " == other." + key.Name #>
<#			}#>
			<#=" ;"#>
		<#="}"#>

		<#="public override int GetHashCode()"#>
		<#="{"#>
			<#="unchecked"#>
			<#="{"#>
				<#="int hash = GetType().GetHashCode();"#>
<#			foreach (tgPropertyRef key in info.ConceptualModel.Key)
			{
#>
				<#="hash = (hash * 31) ^ " + key.Name + ".GetHashCode();"#>
<#			}#>

				<#="return hash;"#>
			<#="}"#>
		<#="}"#>
<#		}
#>
    <#="}"#>
<#

        EndNamespace(code);
    }
    fileManager.Process();
#>
<#+
public void BeginNamespace(CodeGenerationTools code)
{
    var codeNamespace = code.VsNamespaceSuggestion();
    if (!String.IsNullOrEmpty(codeNamespace))
    {
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
    }
}

public void EndNamespace(CodeGenerationTools code)
{
    if (!String.IsNullOrEmpty(code.VsNamespaceSuggestion()))
    {
#>
}
<#+
    }
}
#>